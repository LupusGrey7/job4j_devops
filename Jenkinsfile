pipeline {
    agent { label 'agent1' }
// ‚û§‚û§‚û§ –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ environment –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫—ç—à–∞
    environment {
        // –õ–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤ Jenkins (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å–ø–æ—Å–æ–±)
        GRADLE_REMOTE_CACHE_USERNAME = "${env.GRADLE_REMOTE_CACHE_USERNAME}"
        GRADLE_REMOTE_CACHE_PASSWORD = "${env.GRADLE_REMOTE_CACHE_PASSWORD}"
        // URL –∫—ç—à–∞ –∏–∑ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö Jenkins (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω)
        GRADLE_REMOTE_CACHE_URL = "${env.GRADLE_REMOTE_CACHE_URL ?: 'http://192.168.0.109:5071/cache/'}"
    }

    tools {
        git 'Default'
    }

    stages {
        stage('Prepare Environment') {
            steps {
                script {
                    sh 'chmod +x ./gradlew'
                }
            }
        }

        stage('Checkstyle') {
            steps {
                script {
                    try {
                        sh './gradlew checkstyleMain checkstyleTest'
                    } catch (e) {
                        telegramSend(message: "Checkstyle FAILED: ${env.JOB_NAME} #${env.BUILD_NUMBER}")
                        error "Checkstyle failed"
                    }
                }
            }
        }

        stage('Compile') {
            steps {
                script {
                    try {
                        sh './gradlew compileJava'
                    } catch (e) {
                        telegramSend(message: "Compilation FAILED: ${env.JOB_NAME} #${env.BUILD_NUMBER}")
                        error "Compilation failed"
                    }
                }
            }
        }

        stage('Test') {
            steps {
                script {
                    try {
                        sh './gradlew test'
                    } catch (e) {
                        telegramSend(message: "Tests FAILED: ${env.JOB_NAME} #${env.BUILD_NUMBER}")
                        error "Tests failed"
                    }
                }
            }
        }

        stage('Code Coverage') {
            steps {
                script {
                    try {
                        sh './gradlew jacocoTestReport jacocoTestCoverageVerification'
                    } catch (e) {
                        telegramSend(message: "Code coverage FAILED: ${env.JOB_NAME} #${env.BUILD_NUMBER}")
                        error "Code coverage failed"
                    }
                }
            }
        }
//--refresh-dependencies –∑–∞—Å—Ç–∞–≤–∏—Ç Gradle –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –∑–∞–ø–∏—Å–∞—Ç—å –∏—Ö –≤ —É–¥–∞–ª—ë–Ω–Ω—ã–π –∫—ç—à.
        stage('Build') {
            steps { //—à–∞–≥ –≤ Jenkins pipeline:
                script {
                    try {
                        sh '''
                             ./gradlew clean build \
                             --build-cache \
                             --refresh-dependencies \
                             --info \
                             -x test \
                             -Dgradle.cache.remote.url=$GRADLE_REMOTE_CACHE_URL \
                             -Dgradle.cache.remote.username=$GRADLE_REMOTE_CACHE_USERNAME \
                             -Dgradle.cache.remote.password=$GRADLE_REMOTE_CACHE_PASSWORD
                        '''
                        telegramSend(message: "‚úÖ Build SUCCESS: ${env.JOB_NAME} #${env.BUILD_NUMBER}\nView build: ${env.BUILD_URL}")
                    } catch (e) {
                        telegramSend(message: "‚ùå Build FAILED: ${env.JOB_NAME} #${env.BUILD_NUMBER}\nView build: ${env.BUILD_URL}")
                        error "Build failed"
                    }
                }
            }
        }
    }

    post { //this is post bloc for telegram
        always {
            script {
                def buildInfo = "üìä Build Info:\n" +
                               "Job: ${env.JOB_NAME}\n" +
                               "Build #: ${currentBuild.number}\n" +
                               "Status: ${currentBuild.currentResult}\n" +
                               "Duration: ${currentBuild.durationString}\n" +
                               "View build: ${env.BUILD_URL}"
                 telegramSend(message: buildInfo)
            }
        }

        success {
            echo "Build succeeded!"
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
        }

        failure {
            echo "Build failed!"
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ
        }

        unstable {
            echo "Build unstable!"
            telegramSend(message: "‚ö†Ô∏è Build UNSTABLE: ${env.JOB_NAME} #${env.BUILD_NUMBER}")
        }
    }
}
