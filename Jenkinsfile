pipeline {
    agent { label 'agent1' }

    tools {
        git 'Default'
    }

    stages {
        stage('Prepare Environment') {
            steps {
                script {
                    sh 'chmod +x ./gradlew'
                }
            }
        }

        stage('Checkstyle') {
            steps {
                script {
                    try {
                        sh './gradlew checkstyleMain checkstyleTest'
                    } catch (e) {
                        telegramSend(message: "Checkstyle FAILED: ${env.JOB_NAME} #${env.BUILD_NUMBER}")
                        error "Checkstyle failed"
                    }
                }
            }
        }

        stage('Compile') {
            steps {
                script {
                    try {
                        sh './gradlew compileJava'
                    } catch (e) {
                        telegramSend(message: "Compilation FAILED: ${env.JOB_NAME} #${env.BUILD_NUMBER}")
                        error "Compilation failed"
                    }
                }
            }
        }

        stage('Test') {
            steps {
                script {
                    try {
                        sh './gradlew test'
                    } catch (e) {
                        telegramSend(message: "Tests FAILED: ${env.JOB_NAME} #${env.BUILD_NUMBER}")
                        error "Tests failed"
                    }
                }
            }
        }

        stage('Code Coverage') {
            steps {
                script {
                    try {
                        sh './gradlew jacocoTestReport jacocoTestCoverageVerification'
                    } catch (e) {
                        telegramSend(message: "Code coverage FAILED: ${env.JOB_NAME} #${env.BUILD_NUMBER}")
                        error "Code coverage failed"
                    }
                }
            }
        }
//--refresh-dependencies –∑–∞—Å—Ç–∞–≤–∏—Ç Gradle –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –∑–∞–ø–∏—Å–∞—Ç—å –∏—Ö –≤ —É–¥–∞–ª—ë–Ω–Ω—ã–π –∫—ç—à.
        stage('Build') {
            steps { //—à–∞–≥ –≤ Jenkins pipeline:
                script {
                    try {
                        sh './gradlew clean build --build-cache --refresh-dependencies -x test' // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
                        telegramSend(message: "‚úÖ Build SUCCESS: ${env.JOB_NAME} #${env.BUILD_NUMBER}\n" +
                                            "View build: ${env.BUILD_URL}")
                    } catch (e) {
                        telegramSend(message: "‚ùå Build FAILED: ${env.JOB_NAME} #${env.BUILD_NUMBER}\n" +
                                            "View build: ${env.BUILD_URL}")
                        error "Build failed"
                    }
                }
            }
        }
    }

    post { //this is post bloc for telegram
        always {
            script {
                def buildInfo = "üìä Build Info:\n" +
                               "Job: ${env.JOB_NAME}\n" +
                               "Build #: ${currentBuild.number}\n" +
                               "Status: ${currentBuild.currentResult}\n" +
                               "Duration: ${currentBuild.durationString}\n" +
                               "View build: ${env.BUILD_URL}"
                 telegramSend(message: buildInfo)
            }
        }

        success {
            echo "Build succeeded!"
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
        }

        failure {
            echo "Build failed!"
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ
        }

        unstable {
            echo "Build unstable!"
            telegramSend(message: "‚ö†Ô∏è Build UNSTABLE: ${env.JOB_NAME} #${env.BUILD_NUMBER}")
        }
    }
}
