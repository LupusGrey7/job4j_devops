ipeline {
    agent { label 'agent1' }

    parameters {
        choice(
            name: 'ENV',
            choices: ['develop', 'ci', 'stage'],
            description: '–í—ã–±–µ—Ä–∏—Ç–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ'
        )
        booleanParam(
            name: 'SKIP_TESTS',
            defaultValue: false,
            description: '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤?'
        )
    }

    // ‚û§‚û§‚û§ –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ environment –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫—ç—à–∞
    environment {
        // 1. –ü—É—Ç—å –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ agent1
        JAVA_HOME = '/opt/java/openjdk'

    // 4. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∞ (–∫–∞–∫ —É –≤–∞—Å)// –õ–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤ Jenkins (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å–ø–æ—Å–æ–±)
 //     GRADLE_REMOTE_CACHE_USERNAME = "${env.GRADLE_REMOTE_CACHE_USERNAME}"
 //     GRADLE_REMOTE_CACHE_PASSWORD = "${env.GRADLE_REMOTE_CACHE_PASSWORD}"

         // 5.URL –∫—ç—à–∞ –∏–∑ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö Jenkins (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω)
        GRADLE_REMOTE_CACHE_URL = "${env.GRADLE_REMOTE_CACHE_URL ?: 'http://192.168.0.109:5071/'}" // –ë–µ–∑ /cache/
    }

    tools {
        git 'Default'
        // jdk 'jdk-21' // –ú–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    }

    stages {
        stage('Init') { //—Å–æ–¥–µ—Ä–∂–∏—Ç —ç—Ç–∞–ø—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
            steps { // —à–∞–≥–∏, –≤—ã–ø–æ–ª–Ω—è–µ–º—ã–µ –Ω–∞ –¥–∞–Ω–Ω–æ–º —ç—Ç–∞–ø–µ.
                script {
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞
                    if (!fileExists('scripts/gradleUtils.groovy')) {
                        error "‚ùå gradleUtils.groovy not found!"
                    }
                    //–í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞ echo –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞.
                    echo "üîÑ Loading gradleUtils..."
                    // –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º
                    runGradleTask = load 'scripts/gradleUtils.groovy'
                    sh 'chmod +x ./gradlew'

                    //–∑–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º
                    if (runGradleTask == null) {
                        error "‚ùå runGradleTask is NULL! Did you forget to commit scripts/gradleUtils.groovy?"
                    }

                    // –ö–æ–ø–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–π .env —Ñ–∞–π–ª –ø—Ä—è–º–æ –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
                    def dotenvSource = "env/.env.${params.ENV}"
                    echo "‚ÑπÔ∏è Copying ${dotenvSource} to .env"
                    if (!fileExists(dotenvSource)) {
                        error "‚ùå ${dotenvSource} not found!"
                    }
                    sh "cp ${dotenvSource} .env"

                    echo """
                    ‚öôÔ∏è Environment Info:
                    - ENV: ${params.ENV}
                    - Java: ${JAVA_HOME}
                    - Gradle Cache: ${GRADLE_REMOTE_CACHE_URL}
                    """
                }
            }
        }

        stage('Checkstyle') {
            steps {
                script {
                    runGradleTask('checkstyleMain checkstyleTest', 'Checkstyle FAILED')
                }
            }
        }

        stage('Compile') {
            steps {
                script {
                    runGradleTask('compileJava', 'Compilation FAILED')
                }
            }
        }

        stage('Test') {
            when {
                expression { return !params.SKIP_TESTS.toBoolean() }
            }
            steps {
                script {
                    runGradleTask('test', 'Tests FAILED')
                }
            }
        }

        stage('Code Coverage') {
            steps {
                script {
                    runGradleTask('jacocoTestReport jacocoTestCoverageVerification', 'Code coverage FAILED')
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    try {
                        runGradleTask(
                            "clean build --build-cache --refresh-dependencies -x test " +
                            "-Dorg.gradle.caching.http.HttpBuildCache.allowInsecureProtocol=true " + //‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ- –†–∞–∑—Ä–µ—à–∏—Ç—å HTTP –Ω–µ —Ç—Ä–µ–±–æ–≤–∞—Ç—å HTTPS
                            "-Pdotenv.filename=${DOTENV_FILE} " +
                            "-Dgradle.cache.remote.url=${GRADLE_REMOTE_CACHE_URL}",
//                             "-Dgradle.cache.remote.username=${GRADLE_REMOTE_CACHE_USERNAME} " +
//                             "-Dgradle.cache.remote.password=${GRADLE_REMOTE_CACHE_PASSWORD}",
                            'Build FAILED',
                            DOTENV_FILE
                        )
                        telegramSend(message: "‚úÖ Build SUCCESS: ${env.JOB_NAME} #${env.BUILD_NUMBER}")
                    } catch (e) {
                        telegramSend(message: "‚ùå Build FAILED: ${env.JOB_NAME} #${env.BUILD_NUMBER}")
                        error "Build failed: ${e.message}"
                    }
                }
            }
        }

        stage('Update DB') {
            steps {
                script {
                    runGradleTask('update', 'Update DB FAILED')
                }
            }
        }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ post –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
    post {
        always {
            script {
                def buildInfo = """
                üìä Build Info:
                Job: ${env.JOB_NAME}
                Build #: ${currentBuild.number}
                Status: ${currentBuild.currentResult}
                Duration: ${currentBuild.durationString}
                Environment: ${params.ENV}
                """.stripIndent()

                telegramSend(message: buildInfo)

                // –û—á–∏—Å—Ç–∫–∞ .env —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω
                if (fileExists('.env')) {
                    sh 'rm -f .env'
                    echo "üóëÔ∏è Removed temporary .env"
                }
            }
        }
        success {
            echo "Build succeeded!"
        }
        failure {
            echo "Build failed!"
        }
        unstable {
            echo "Build unstable!"
            telegramSend(message: "‚ö†Ô∏è Build UNSTABLE: ${env.JOB_NAME} #${env.BUILD_NUMBER}")
        }
    }
}


// —à–∞–±–ª–æ–Ω
//pipeline {
//    agent { label 'agent1' }
//    environment { ... }
//    tools { ... }
//    stages { ... }
//    post { ... }
//}

//stage('Build') {
//               steps {
//                   script {
//                       try {
//                           // –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–∑–æ–≤ —á–µ—Ä–µ–∑ runGradleTask
//                           runGradleTask(
//                               "clean build --build-cache --refresh-dependencies -x test " +
//                               "-Dorg.gradle.caching.remote.allow-insecure-protocol=true " + // –†–∞–∑—Ä–µ—à–∏—Ç—å HTTP –Ω–µ —Ç—Ä–µ–±–æ–≤–∞—Ç—å HTTPS
//                               "-Pdotenv.filename=${DOTENV_FILE} " +
//                               "-Dgradle.cache.remote.url=${GRADLE_REMOTE_CACHE_URL} " +
//                               "-Dgradle.cache.remote.username=${GRADLE_REMOTE_CACHE_USERNAME} " +
//                               "-Dgradle.cache.remote.password=${GRADLE_REMOTE_CACHE_PASSWORD}",
//                               'Build FAILED',
//                               DOTENV_FILE
//                           )
//                           telegramSend(message: "‚úÖ Build SUCCESS: ${env.JOB_NAME} #${env.BUILD_NUMBER}")
//                       } catch (e) {
//                           telegramSend(message: "‚ùå Build FAILED: ${env.JOB_NAME} #${env.BUILD_NUMBER}")
//                           error "Build failed: ${e.message}"
//                       }
//                   }
//               }
//           }